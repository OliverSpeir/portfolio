---
import { getCollection } from "astro:content";
// import Footer from "../components/Footer.astro";
import Sidebar from "../../components/Sidebar.astro"
import Bottombar from "../../components/Bottombar.astro";
import NavLinks from "../../components/NavLinks.astro";
// import Meta from "../../components/Meta.astro";
import type { CollectionEntry} from "astro:content";
import type { MarkdownHeading } from "astro";
import CopyCodeButtonScript from "../../components/CopyCodeButtonScript.astro"
import "../../components/style.css"
import SocialLogos from "../../components/SocialLogos.astro";
import { ViewTransitions } from 'astro:transitions';

export async function getStaticPaths() {
  const blogs = await getCollection("blogs");
  return blogs.map((blog: CollectionEntry<"blogs">) => ({
    params: { slug: blog.slug },
    props: { blog },
  }));
}

type Props = {
  blog: CollectionEntry<"blogs">
}
const { blog }  = Astro.props;

const { Content, headings } = await blog.render();

const findRelatedblogs = (
  currentBlog: CollectionEntry<"blogs">,
  allblogs: CollectionEntry<"blogs">[]
) => {
  const currentSlugPath = currentBlog.slug.split("/");
  const relatedblogs = allblogs
    .filter((blog) => blog.slug !== currentBlog.slug)
    .filter((blog) => {
      const slugPath = blog.slug.split("/");
      if (currentSlugPath.length === 1 && slugPath.length === 1) {
        return true;
      }
      return (
        slugPath.length >= 2 &&
        (slugPath.slice(0, -1).join("/") ===
          currentSlugPath.slice(0, -1).join("/") ||
          slugPath[0] === currentSlugPath[0])
      );
    })
    .map((blog) => {
      return {
        slug: blog.slug,
        text: blog.id.split("/").pop()?.split(".")[0] || ""
      };
    });

  return relatedblogs;
};
export type RelatedType = ReturnType<typeof findRelatedblogs>;

const checkIfContainsMarkdownCodeBlock = (noteBody: CollectionEntry<"blogs">['body']): boolean => {
    const codeBlockRegex = /```[^`]*```/g;
    return codeBlockRegex.test(noteBody);
}  

const blogs = await getCollection("blogs");
const related = findRelatedblogs(blog, blogs);
const headingsWithDepth2 = headings.filter((heading) => heading.depth === 2);
function removeSectionFromText(headings: MarkdownHeading[]) {
  return headings.map(item => {
    const index = item.text.indexOf("Section"); // Find the index of "Section"

    if (index !== -1) {
      return {
        ...item,
        text: item.text.slice(0, index).trim() // Remove everything after and including "Section"
      };
    }

    return item; // Return item unchanged if "Section" not found
  });
}
const updatedHeadings = removeSectionFromText(headingsWithDepth2);
const noteTitle = blog.id.split("/").pop()?.split(".")[0] || "";
const containsCode = checkIfContainsMarkdownCodeBlock(blog.body)

---

<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <meta name="description" content={blog.data.description} />
    <link rel="icon" type="image/svg" href="/favicon.svg" />
    <link rel="apple-touch-icon" href="/profile_picture_small.png" />
    <link rel="sitemap" href="/sitemap-index.xml" />
    <meta property="og:description" content={blog.data.description}/>
    <meta property="og:image" content={blog.data.cardPicture} />
    <meta property="og:url" content=`www.oliverspeir.com/${blog.slug}` />
    <meta name="twitter:card" content={blog.data.cardPicture} />
    <meta property="og:title" content={blog.data.title} />
    <title>{blog.data.title}</title>
    <!-- <Meta/> -->
    {containsCode && <CopyCodeButtonScript/> }
    <title>{noteTitle}</title>
    <ViewTransitions />
  </head>
  <NavLinks/>
  <body class="bg-zinc-100 dark:bg-zinc-800"  tabindex="0" >
    <Sidebar related={related}, headingsWithDepth2={updatedHeadings}/>
    <Bottombar related={related}, headingsWithDepth2={updatedHeadings} />

    <article class="prose prose-zinc md:prose-lg lg:prose-xl prose-blockquote:bg-zinc-300 dark:prose-blockquote:bg-zinc-900 prose-blockquote:rounded-lg  mx-auto prose-li:my-0 dark:prose-blockquote:text-zinc-100 prose-blockquote:text-zinc-950  text-zinc-950 dark:prose-code:bg-zinc-400 prose-code:bg-zinc-300 prose-pre: prose-code:text-black prose-code:rounded-md prose-li:marker:text-zinc-950 prose-strong:text-zinc-950 prose-headings:text-black prose-a:text-blue-600 hover:prose-a:text-blue-900 dark:prose-strong:text-zinc-100 dark:text-zinc-100 dark:prose-li:marker:text-zinc-100 dark:prose-headings:text-zinc-50 dark:prose-a:text-blue-400 dark:hover:prose-a:text-blue-600 p-4 min-h-screen h-full break-words pb-14">
      <Content />
    </article>

    
</body>
<SocialLogos class="projects"/>
<div class="mb-16"></div>
</html>
<style>
  body {
    @apply dark:bg-zinc-800 bg-zinc-100
  }
</style>
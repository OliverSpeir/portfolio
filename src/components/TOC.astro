---
import { Icon } from "astro-icon/components";
import type { MarkdownHeading } from "astro";

export type Props = {
	headings: MarkdownHeading[];
	maxHeadingDepth?: number;
	minHeadingDepth?: number;
};

type TocItem = MarkdownHeading & {
	children: TocItem[];
};
const { headings, maxHeadingDepth = 3, minHeadingDepth = 2 } = Astro.props;

const generateToC = (
	headings: MarkdownHeading[],
	minHeadingLevel: number,
	maxHeadingLevel: number,
): TocItem[] => {
	headings = headings.filter(
		(heading) => heading.depth >= minHeadingLevel && heading.depth <= maxHeadingLevel,
	);
	const toc: TocItem[] = [{ depth: 2, slug: "_top", text: "Overview", children: [] }];
	headings.forEach((heading) => injectChild(toc, { ...heading, children: [] }));
	return toc;
};

const injectChild = (items: TocItem[], item: TocItem): void => {
	const lastItem = items[items.length - 1];
	if (!lastItem || lastItem.depth >= item.depth) {
		items.push(item);
	} else {
		injectChild(lastItem.children, item);
	}
};

const toc = generateToC(headings, minHeadingDepth, maxHeadingDepth);

const removeLinkText = (input: string) => {
	return input.replace(/Link to the .*? section of this page/g, "");
};

/** make this properly if you want to scoped style it etc https://github.com/withastro/starlight/blob/main/packages/starlight/components/TableOfContents/TableOfContentsList.astro by having this function be its own astro component that uses Astro.self */
const renderTocItems = (items: TocItem[]): string => `
  <ul>
    ${items
			.map(
				(item) => `
      <li>
        <a href="#${item.slug}">${removeLinkText(item.text)}</a>
        ${item.children && item.children.length > 0 ? renderTocItems(item.children) : ""}
      </li>
    `,
			)
			.join("")}
  </ul>
`;
---

<template id="desktopToc">
	<nav class="flex flex-col justify-center">
		<span class="mb-0 text-center font-semibold text-lg text-zinc-800 dark:text-zinc-300">Table of Contents</span>
		<div class="">
			<Fragment set:html={renderTocItems(toc)} />
		</div>
	</nav>
</template>
<template id="mobileToc">
	<nav>
		<div id="toc-display">
			<button id="toc-toggle" aria-label="open table of contents">
				<div id="button-title">
					Contents
					<Icon name="gridicons:chevron-right" id="caret" aria-hidden="true" />
				</div>
				<span id="display-current">Overview</span>
			</button>
		</div>
		<section id="toc-content" aria-expanded="false">
			<div id="toc-content-wrapper">
				<Fragment set:html={renderTocItems(toc)} />
			</div>
		</section>
	</nav>
</template>
<aside-toc></aside-toc>


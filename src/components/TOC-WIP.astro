---
import { Icon } from "astro-icon/components";
import type { MarkdownHeading } from "astro";
type Props = {
	headings: MarkdownHeading[];
	maxHeadingDepth: number;
	minHeadingDepth: number;
};
type TocItem = MarkdownHeading & {
	children: TocItem[];
};
const { headings, maxHeadingDepth, minHeadingDepth } = Astro.props;

const generateToC = (
	headings: MarkdownHeading[],
	minHeadingLevel: number,
	maxHeadingLevel: number,
): TocItem[] => {
	headings = headings.filter(
		(heading) => heading.depth >= minHeadingLevel && heading.depth <= maxHeadingLevel,
	);
	const toc: TocItem[] = [];
	headings.forEach((heading) => injectChild(toc, { ...heading, children: [] }));
	return toc;
};

const injectChild = (items: TocItem[], item: TocItem): void => {
	const lastItem = items[items.length - 1];
	if (!lastItem || lastItem.depth >= item.depth) {
		items.push(item);
	} else {
		injectChild(lastItem.children, item);
	}
};

const toc = generateToC(headings, minHeadingDepth, maxHeadingDepth);

const removeLinkText = (input: string) => {
	return input.replace(/Link to the .*? section of this page/g, "");
};

const renderTocItems = (items: TocItem[]): string => `
  <ul style="margin-bottom: 0px;">
    ${items
			.map(
				(item) => `
      <li>
        <a href="#${item.slug}">${removeLinkText(item.text)}</a>
        ${item.children && item.children.length > 0 ? renderTocItems(item.children) : ""}
      </li>
    `,
			)
			.join("")}
  </ul>
`;
---

<nav>
	<details>
		<summary class="flex">
			<div
				class="flex cursor-pointer select-none items-center gap-x-1 text-dark-accent-color hover:underline"
			>
				Table of Contents
				<Icon name="gridicons:chevron-down" id="caret" class="h-5 w-5" aria-hidden="true" />
			</div>
			<span class="display-current"></span>
		</summary>
		<div class="dropdown -mt-3">
			<Fragment set:html={renderTocItems(toc)} />
		</div>
	</details>
</nav>

<style>
	summary::marker,
	summary::-webkit-details-marker {
		display: none;
	}
	details[open] #caret {
		transform: rotateZ(180deg);
	}
</style>

---
import type { MarkdownHeading } from "astro";

type Props = {
  headings: MarkdownHeading[];
};
const { headings } = Astro.props;
---

<button
  class="responsive-toggle z-50 ml-1 border-none bg-light-bg hover:cursor-pointer focus-visible:ring-0 focus-visible:ring-offset-0 focus-visible:border-2 focus-visible:border-solid focus-visible:border-btn-color dark:focus-visible:border-dark-btn-color dark:bg-dark-bg md:ml-0 focus-visible:mt-1"
  aria-expanded="false"
  aria-label="Open menu navigation"
>
  <svg
    xmlns="http://www.w3.org/2000/svg"
    fill="none"
    viewBox="0 0 24 24"
    stroke-width="1.5"
    stroke="currentColor"
    class="-mt-1 h-8 w-8 text-zinc-950 dark:text-zinc-100"
    aria-hidden="true"
  >
    <path
      stroke-linecap="round"
      stroke-linejoin="round"
      d="M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25h16.5"></path>
  </svg>
</button>

<nav
  id="mobile-menu"
  class="mobile-menu absolute left-0 right-0 top-[2rem] z-0 -translate-y-full transform rounded-lg opacity-0 duration-300 ease-in-out md:hidden"
  aria-label="Main navigation mobile"
  aria-hidden="true"
>
  <ul class="flex list-none flex-col gap-1 bg-light-bg p-4 dark:bg-dark-bg">
    {
      headings.map((entry) => {
        return (
          <li class="col-span-1 row-span-1">
            <a class="rounded-lg hidden" href={`#${entry.slug}`}>
             {entry.text.split("Link")[0].trim()}
            </a>
          </li>
        );
      })
    }
  </ul>
</nav>

<script>
  function reinitializeMenu() {
    const responsiveToggle = document.querySelector(
      ".responsive-toggle"
    ) as HTMLButtonElement;
    const mobileNavigation = document.querySelector(
      ".mobile-menu"
    ) as HTMLElement;

    const openMenu = (toggle: HTMLButtonElement) => {
      toggle.setAttribute("aria-expanded", "true");
      toggle.setAttribute("aria-label", "Close menu navigation");
      toggle.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="w-8 h-8 -mt-1 sm:mt-0 dark:text-zinc-100 text-zinc-950 "><path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" /></svg>`;
    };

    const closeMenu = (toggle: HTMLButtonElement) => {
      toggle.setAttribute("aria-expanded", "false");
      toggle.setAttribute("aria-label", "Open menu navigation");
      toggle.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" aria-hidden="true" stroke-width="1.5" stroke="currentColor" class="w-8 h-8 -mt-1 sm:mt-0 dark:text-zinc-100 text-zinc-950 "><path stroke-linecap="round" stroke-linejoin="round" d="M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25h16.5" /></svg>`;
    };

    const setVisibility = (element: HTMLElement) => {
      const focusableElements = element.querySelectorAll("a, button");
      focusableElements.forEach((el) => {
        el.classList.toggle("hidden");
        el.classList.toggle("block");
      });
    };

    const toggleClickListener = (event: MouseEvent) => {
      event.stopPropagation();

      if (mobileNavigation.classList.contains("opacity-0")) {
        mobileNavigation.classList.remove("opacity-0", "-translate-y-full");
        mobileNavigation.classList.add("opacity-100", "translate-y-0");
        mobileNavigation.setAttribute("aria-hidden", "false");
        setVisibility(mobileNavigation);
        openMenu(responsiveToggle);
        document.addEventListener("click", closeMenuOnClickOutside);
      } else {
        mobileNavigation.classList.remove("opacity-100", "translate-y-0");
        mobileNavigation.classList.add("opacity-0", "-translate-y-full");
        mobileNavigation.setAttribute("aria-hidden", "true");
        setVisibility(mobileNavigation);
        closeMenu(responsiveToggle);
        document.removeEventListener("click", closeMenuOnClickOutside);
      }
    };

    const closeMenuOnClickOutside = (event: MouseEvent) => {
      if (
        !mobileNavigation.contains(event.target as Node) &&
        !responsiveToggle.contains(event.target as Node)
      ) {
        mobileNavigation.classList.remove("opacity-100", "translate-y-0");
        mobileNavigation.classList.add("opacity-0", "-translate-y-full");
        mobileNavigation.setAttribute("aria-hidden", "true");
        setVisibility(mobileNavigation);
        closeMenu(responsiveToggle);
        document.removeEventListener("click", closeMenuOnClickOutside);
      }
    };

    const cleanup = () => {
      responsiveToggle.removeEventListener("click", toggleClickListener);
      document.removeEventListener("click", closeMenuOnClickOutside);
    };

    cleanup();
    responsiveToggle.addEventListener("click", toggleClickListener);
  }

  document.addEventListener("astro:page-load", reinitializeMenu);
</script>

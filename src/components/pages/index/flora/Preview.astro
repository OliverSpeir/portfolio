---
import { Icon } from "astro-icon/components";
import { getEntry } from "astro:content";
type Props = {
	entry?: string;
	href?: string;
	title?: string;
	date?: string;
	description?: string;
	target?: string;
	external?: boolean;
	readingTime?: string;
	dated?: boolean;
};
let {
	entry,
	href = "",
	title = "",
	date = "",
	description = "",
	target,
	external = false,
	readingTime = "",
	dated = true,
} = Astro.props;
if (entry) {
	const Entry = await getEntry("blog", entry);
	const { remarkPluginFrontmatter: EntryFrontmatter } = await Entry!.render();
	if (title === "") title = Entry!.data.title;
	if (href === "") href = `/garden/${Entry!.slug}`;
	if (date === "")
		date = new Date(Entry!.data.date).toLocaleString("en-US", {
			month: "short",
			year: "numeric",
		});
	if (description === "") description = Entry!.data.description;
	if (readingTime === "") readingTime = EntryFrontmatter.minutesRead;
}
---

<a
	{href}
	{target}
	class="group flex flex-col rounded-sm bg-zinc-200 !no-underline dark:bg-zinc-900 px-1"
>
	<div class="mx-2 -mt-2 mb-1">
		<h3 class="mb-0 leading-6 underline-offset-1 group-hover:underline flex gap-2 ">
			{title}
			{external && <Icon name="gridicons:reader-external" class="h-7 w-7" aria-hidden="true" />}
		</h3>
		<div class="mt-1 flex gap-4">
			{
				dated && (
					<time datetime={date} class="my-0 text-xs text-zinc-600 dark:text-zinc-400">
						{date}
					</time>
				)
			}
			{
				readingTime && (
					<span class="my-0 text-xs text-zinc-600 dark:text-zinc-400">{readingTime}</span>
				)
			}
		</div>
		<p class="mb-0 mt-2 line-clamp-3 text-sm leading-6 text-light-text dark:text-dark-text">
			{description}
		</p>
	</div>
</a>

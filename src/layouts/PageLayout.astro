---
import "@assets/styles/tailwind.css";
import { ViewTransitions } from "astro:transitions";
import type { TransitionAnimationPair } from "astro";
import { Head } from "astro-capo";
import Meta from "@components/Meta.astro";
import type { CollectionEntry } from "astro:content";
import ThemeManager from "@components/ThemeManager.astro";

type Props = {
	title: string;
	description: string;
	post?: CollectionEntry<"blog"> | undefined;
};
const { title, description, post } = Astro.props;

const anim: TransitionAnimationPair = {
	old: {
		name: "fadeOutUp",
		duration: "0.15s",
		easing: "ease-in",
		fillMode: "forwards",
	},
	new: {
		name: "fadeInUp",
		duration: "0.15s",
		delay: "0.15s",
		easing: "ease-out",
		fillMode: "backwards",
	},
};

const viewTransition = {
	forwards: anim,
	backwards:anim,
};
---

<!doctype html>
<html lang="en" dir="ltr">
	<Head>
		{
			Astro.url.pathname === "/" && (
				<link rel="preload" as="image" href="/pfp_5k.avif" type="image/avif" />
			)
		}
		<Meta {title} {description} {post} />
		<ThemeManager />
		<ViewTransitions />
	</Head>
	<body>
		<script is:inline>
			(() => {
				const themeColorMeta = document.querySelector('meta[name="theme-color"]');
				const currentTheme = theme.getTheme();
				let color;
				if (currentTheme === "auto") {
					color = theme.getSystemTheme() === "dark" ? "#acbef9" : "#2f3a91";
				} else {
					color = currentTheme === "dark" ? "#acbef9" : "#2f3a91";
				}
				themeColorMeta && themeColorMeta.setAttribute("content", color);
			})();
		</script>
		<main transition:animate={viewTransition}>
			<slot />
		</main>
		<script>
			function loadFathom() {
				let script = document.createElement("script");
				script.src = "https://cdn.usefathom.com/script.js";
				script.setAttribute("data-site", "IGUNNGJS");
				document.body.appendChild(script);
			}
			window.onload = loadFathom;
			document.addEventListener("astro:page-load", function () {
				loadFathom();
			});
		</script>
		<script>
			type ThemeChangedEventDetail = {
				theme: "dark" | "light" | "auto";
				systemTheme: "dark" | "light";
				defaultTheme: "dark" | "light" | "auto";
			};

			const setBrowserTheme = (
				theme: ThemeChangedEventDetail["theme"],
				systemTheme: ThemeChangedEventDetail["systemTheme"],
			) => {
				const themeColorMeta = document.querySelector('meta[name="theme-color"]');

				let color;
				if (theme === "auto") {
					color = systemTheme === "dark" ? "#acbef9" : "#2f3a91";
				} else {
					color = theme === "dark" ? "#acbef9" : "#2f3a91";
				}

				themeColorMeta && themeColorMeta.setAttribute("content", color);
			};

			document.addEventListener("theme-changed", (e) => {
				const customEvent = e as CustomEvent<ThemeChangedEventDetail>;
				setBrowserTheme(customEvent.detail.theme, customEvent.detail.systemTheme);
			});
		</script>
		<style>
			@keyframes fadeOutUp {
				from {
					opacity: 1;
					transform: translateY(0);
				}

				to {
					opacity: 0;
					transform: translateY(12px);
				}
			}

			@keyframes fadeInUp {
				from {
					opacity: 0;
					transform: translateY(12px);
				}

				to {
					opacity: 1;
					transform: translateY(0);
				}
			}
		</style>
	</body>
</html>
